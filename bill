#!/usr/bin/env python3

import argparse
import boto3
import datetime
import csv




parser = argparse.ArgumentParser()
parser.add_argument('--days', type=int, default=30)
args = parser.parse_args()



def getSummaryData():
 session = boto3.Session(profile_name='xxx')
 now = datetime.datetime.utcnow()
 start = (now - datetime.timedelta(days=args.days)).strftime('%Y-%m-%d')
 end = now.strftime('%Y-%m-%d')

 cd = session.client('ce', 'us-east-1')

 results = []
 res = {}
 token = None
 while True:
    if token:
        kwargs = {'NextPageToken': token}
    else:
        kwargs = {}
    data = cd.get_cost_and_usage(TimePeriod={'Start': start, 'End':  end}, Granularity='DAILY', Metrics=['UnblendedCost'], GroupBy=[{'Type': 'DIMENSION', 'Key': 'LINKED_ACCOUNT'}, {'Type': 'DIMENSION', 'Key': 'SERVICE'}], **kwargs)
    results += data['ResultsByTime']
    token = data.get('NextPageToken')
    if not token:
        break

 print('\t'.join(['TimePeriod', 'LinkedAccount', 'Service', 'Amount', 'Unit', 'Estimated']))
 for result_by_time in results:
    for group in result_by_time['Groups']:
        amount = group['Metrics']['UnblendedCost']['Amount']
        unit = group['Metrics']['UnblendedCost']['Unit']
        service = group['Keys'][1]
        #print (service,amount)
        try:
         res[service] = res.get(service,0)+float(amount)
        except:
         res[service].append(float(amount))

 return (res)


def getDailyData():
 session = boto3.Session(profile_name='rnd_billing')
 now = datetime.datetime.utcnow()
 start = (now - datetime.timedelta(days=args.days)).strftime('%Y-%m-%d')
 end = now.strftime('%Y-%m-%d')

 cd = session.client('ce', 'us-east-1')

 results = []
 res = []
 token = None
 while True:
    if token:
        kwargs = {'NextPageToken': token}
    else:
        kwargs = {}
    data = cd.get_cost_and_usage(TimePeriod={'Start': start, 'End':  end}, Granularity='DAILY', Metrics=['UnblendedCost'], GroupBy=[{'Type': 'DIMENSION', 'Key': 'LINKED_ACCOUNT'}, {'Type': 'DIMENSION', 'Key': 'SERVICE'}], **kwargs)
    results += data['ResultsByTime']
    token = data.get('NextPageToken')
    if not token:
        break

 print(','.join(['TimePeriod', 'Service', 'Amount']))
 for result_by_time in results:
    for group in result_by_time['Groups']:
        amount = group['Metrics']['UnblendedCost']['Amount']
        unit = group['Metrics']['UnblendedCost']['Unit']
        service = group['Keys'][1]
        res.append([result_by_time['TimePeriod']['Start'],group['Keys'][1],amount])
 return (res)

def saveToCSV(res,account):
 print (type(res))
 if type(res) is dict:
  filename = str("/tmp/"+account+"-billing-sum.csv")
  with open(filename, 'w') as csvFile:
   writer = csv.writer(csvFile)
   writer.writerow(['Account','Service','Amount'])
   for key in res:
    print (account,key,res[key])
    writer.writerow([account,key,res[key]])
  print ("saved to :", filename)
 else:
  filename = str("/tmp/"+account+"-billing-daily.csv")
  with open(filename, 'w') as csvFile:
   writer = csv.writer(csvFile)
   writer.writerow(['Date','Service','Amount'])
   for item in res:
    writer.writerow(item)
  print ("saved to :", filename)


res = getSummaryData()
saveToCSV(res,"rnd")


res = getDailyData()
saveToCSV(res,"rnd")
